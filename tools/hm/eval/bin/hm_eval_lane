#! python3
from hm_cv_metrics.eval import eval_culane
import json

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser('Options for eval culane.')
    parser.add_argument('--dataset-dir', type=str, default=None, help='path to dataset', required=True)
    parser.add_argument('--output-dir', type=str, default=None, help='path to prediction results.', required=True)
    parser.add_argument('--type', type=str, default=None, help='Subset of test', required=True)
    parser.add_argument('--im_w', type=int, default=1640, metavar='N',
                        help='Image width(px)')
    parser.add_argument('--im_h', type=int, default=590, metavar='N',
                        help='Image height(px)')
    parser.add_argument('--w_lane', type=int, default=30,
                        help='Width of lane.(px)')
    parser.add_argument('--iou', default=0.5, type=float,
                        help='IoU threshold for eval.')
    parser.add_argument('--output_file', default=None, type=str,
                        help='Output_file')
    args = parser.parse_args()
    lb_dir = args.dataset_dir
    pred_dir = args.output_dir
    im_h = args.im_h
    im_w = args.im_w
    w_lane = args.w_lane
    iou = args.iou
    output_file = args.output_file
    sub_set = args.type

    lb_dir = lb_dir + '/'
    pred_dir = pred_dir + '/'
    ret = eval_culane(lb_dir, pred_dir, sub_set, w_lane=w_lane, im_h=im_h, im_w=im_w)
    print(json.dumps(ret))
